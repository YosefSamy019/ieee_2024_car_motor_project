
car_motor_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000100c  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082d  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000803  00000000  00000000  00001fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  000027ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ba  00000000  00000000  00002900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000792  00000000  00000000  00002dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000354c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  64:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BUTTON_init>:

#include "BUTTON_interface.h"

void BUTTON_init(u8 but_no)
{
	DIO_pinMode(but_no,INPUT);
  6c:	60 e0       	ldi	r22, 0x00	; 0
  6e:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
  72:	08 95       	ret

00000074 <BUTTON_read>:
}

u8 BUTTON_read(u8 but_no)
{
	return DIO_digitalRead(but_no);
  74:	0e 94 ab 02 	call	0x556	; 0x556 <DIO_digitalRead>
}
  78:	08 95       	ret

0000007a <LED_init>:
#include "LED_INTERFACE.h"


void LED_init(u8 led_no)
{
	DIO_pinMode(led_no,OUTPUT);	
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
  80:	08 95       	ret

00000082 <LED_off>:
}

void LED_off(u8 led_no)
{
	DIO_digitalWrite(led_no,LOW);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
  88:	08 95       	ret

0000008a <LED_on>:
}

void LED_on(u8 led_no)
{
	DIO_digitalWrite(led_no,HIGH);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
  90:	08 95       	ret

00000092 <MOTOR_init>:


#include "MOTOR_interface.h"

void MOTOR_init(void){
	DIO_pinMode(MOTOR_A1,OUTPUT);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	80 ec       	ldi	r24, 0xC0	; 192
  96:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
	DIO_pinMode(MOTOR_B1,OUTPUT);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 ec       	ldi	r24, 0xC1	; 193
  9e:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
	DIO_pinMode(MOTOR_A2,OUTPUT);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 ec       	ldi	r24, 0xC2	; 194
  a6:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
	DIO_pinMode(MOTOR_B2,OUTPUT);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	83 ec       	ldi	r24, 0xC3	; 195
  ae:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
	DIO_pinMode(ENABLE_A,OUTPUT);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	87 ed       	ldi	r24, 0xD7	; 215
  b6:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
	DIO_pinMode(ENABLE_B,OUTPUT);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	86 ed       	ldi	r24, 0xD6	; 214
  be:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_pinMode>
	
	//enable motors
	DIO_digitalWrite(ENABLE_A,HIGH);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	87 ed       	ldi	r24, 0xD7	; 215
  c6:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(ENABLE_B,HIGH);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	86 ed       	ldi	r24, 0xD6	; 214
  ce:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
  d2:	08 95       	ret

000000d4 <MOTOR_forward>:
}

void MOTOR_forward(void){
	DIO_digitalWrite(MOTOR_A1,HIGH);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	80 ec       	ldi	r24, 0xC0	; 192
  d8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B1,LOW);
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	81 ec       	ldi	r24, 0xC1	; 193
  e0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_A2,HIGH);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	82 ec       	ldi	r24, 0xC2	; 194
  e8:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B2,LOW);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	83 ec       	ldi	r24, 0xC3	; 195
  f0:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
  f4:	08 95       	ret

000000f6 <MOTOR_backward>:
}
void MOTOR_backward(void){
	DIO_digitalWrite(MOTOR_A1,LOW);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	80 ec       	ldi	r24, 0xC0	; 192
  fa:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B1,HIGH);
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	81 ec       	ldi	r24, 0xC1	; 193
 102:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_A2,LOW);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	82 ec       	ldi	r24, 0xC2	; 194
 10a:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B2,HIGH);
 10e:	61 e0       	ldi	r22, 0x01	; 1
 110:	83 ec       	ldi	r24, 0xC3	; 195
 112:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
 116:	08 95       	ret

00000118 <MOTOR_turnRight>:
}
void MOTOR_turnRight(void){
	DIO_digitalWrite(MOTOR_A1,LOW);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	80 ec       	ldi	r24, 0xC0	; 192
 11c:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B1,LOW);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	81 ec       	ldi	r24, 0xC1	; 193
 124:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_A2,HIGH);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	82 ec       	ldi	r24, 0xC2	; 194
 12c:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B2,LOW);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	83 ec       	ldi	r24, 0xC3	; 195
 134:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
 138:	08 95       	ret

0000013a <MOTOR_turnLeft>:
}
void MOTOR_turnLeft(void){
	DIO_digitalWrite(MOTOR_A1,HIGH);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	80 ec       	ldi	r24, 0xC0	; 192
 13e:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B1,LOW);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	81 ec       	ldi	r24, 0xC1	; 193
 146:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_A2,LOW);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	82 ec       	ldi	r24, 0xC2	; 194
 14e:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B2,LOW);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	83 ec       	ldi	r24, 0xC3	; 195
 156:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
 15a:	08 95       	ret

0000015c <MOTOR_stop>:
}
void MOTOR_stop(void){
	DIO_digitalWrite(MOTOR_A1,LOW);
 15c:	60 e0       	ldi	r22, 0x00	; 0
 15e:	80 ec       	ldi	r24, 0xC0	; 192
 160:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B1,LOW);
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	81 ec       	ldi	r24, 0xC1	; 193
 168:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_A2,LOW);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	82 ec       	ldi	r24, 0xC2	; 194
 170:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
	DIO_digitalWrite(MOTOR_B2,LOW);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	83 ec       	ldi	r24, 0xC3	; 195
 178:	0e 94 20 02 	call	0x440	; 0x440 <DIO_digitalWrite>
 17c:	08 95       	ret

0000017e <main>:
	//led counters
	u32 led0Counter = 0;
	u32 led1Counter = 0;
	u32 led2Counter = 0;

	LED_init(LED_0);
 17e:	80 ea       	ldi	r24, 0xA0	; 160
 180:	0e 94 3d 00 	call	0x7a	; 0x7a <LED_init>
	LED_init(LED_1);
 184:	81 ea       	ldi	r24, 0xA1	; 161
 186:	0e 94 3d 00 	call	0x7a	; 0x7a <LED_init>
	LED_init(LED_2);
 18a:	82 ea       	ldi	r24, 0xA2	; 162
 18c:	0e 94 3d 00 	call	0x7a	; 0x7a <LED_init>

	BUTTON_init(BUT_0);
 190:	80 eb       	ldi	r24, 0xB0	; 176
 192:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_init>
	BUTTON_init(BUT_1);
 196:	81 eb       	ldi	r24, 0xB1	; 177
 198:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_init>
	BUTTON_init(BUT_2);
 19c:	82 eb       	ldi	r24, 0xB2	; 178
 19e:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_init>
	BUTTON_init(BUT_3);
 1a2:	83 eb       	ldi	r24, 0xB3	; 179
 1a4:	0e 94 36 00 	call	0x6c	; 0x6c <BUTTON_init>
	
	MOTOR_init();
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <MOTOR_init>
int main(void)
{
	//led counters
	u32 led0Counter = 0;
	u32 led1Counter = 0;
	u32 led2Counter = 0;
 1ac:	41 2c       	mov	r4, r1
 1ae:	51 2c       	mov	r5, r1
 1b0:	32 01       	movw	r6, r4

int main(void)
{
	//led counters
	u32 led0Counter = 0;
	u32 led1Counter = 0;
 1b2:	81 2c       	mov	r8, r1
 1b4:	91 2c       	mov	r9, r1
 1b6:	54 01       	movw	r10, r8
#define LED_TIME 3000

int main(void)
{
	//led counters
	u32 led0Counter = 0;
 1b8:	c1 2c       	mov	r12, r1
 1ba:	d1 2c       	mov	r13, r1
 1bc:	76 01       	movw	r14, r12

    /* Replace with your application code */
    while (1) 
    {
					
		if(BUTTON_read(BUT_0) == BUTTON_PRESSED){
 1be:	80 eb       	ldi	r24, 0xB0	; 176
 1c0:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	89 f4       	brne	.+34     	; 0x1ea <main+0x6c>
			//Forward
			led0Counter = 0;
			led1Counter = 0;
			led2Counter = LED_TIME;
			
			MOTOR_forward();
 1c8:	0e 94 6a 00 	call	0xd4	; 0xd4 <MOTOR_forward>
					
		if(BUTTON_read(BUT_0) == BUTTON_PRESSED){
			//Forward
			led0Counter = 0;
			led1Counter = 0;
			led2Counter = LED_TIME;
 1cc:	0f 2e       	mov	r0, r31
 1ce:	f8 eb       	ldi	r31, 0xB8	; 184
 1d0:	4f 2e       	mov	r4, r31
 1d2:	fb e0       	ldi	r31, 0x0B	; 11
 1d4:	5f 2e       	mov	r5, r31
 1d6:	61 2c       	mov	r6, r1
 1d8:	71 2c       	mov	r7, r1
 1da:	f0 2d       	mov	r31, r0
    {
					
		if(BUTTON_read(BUT_0) == BUTTON_PRESSED){
			//Forward
			led0Counter = 0;
			led1Counter = 0;
 1dc:	81 2c       	mov	r8, r1
 1de:	91 2c       	mov	r9, r1
 1e0:	54 01       	movw	r10, r8
    while (1) 
    {
					
		if(BUTTON_read(BUT_0) == BUTTON_PRESSED){
			//Forward
			led0Counter = 0;
 1e2:	c1 2c       	mov	r12, r1
 1e4:	d1 2c       	mov	r13, r1
 1e6:	76 01       	movw	r14, r12
 1e8:	57 c0       	rjmp	.+174    	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
			led1Counter = 0;
			led2Counter = LED_TIME;
			
			MOTOR_forward();

		}else if(BUTTON_read(BUT_1) == BUTTON_PRESSED){
 1ea:	81 eb       	ldi	r24, 0xB1	; 177
 1ec:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	89 f4       	brne	.+34     	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
			//Turn left
			led0Counter = 0;
			led1Counter = LED_TIME;
			led2Counter = 0;
			
			MOTOR_turnLeft();
 1f4:	0e 94 9d 00 	call	0x13a	; 0x13a <MOTOR_turnLeft>

		}else if(BUTTON_read(BUT_1) == BUTTON_PRESSED){
			//Turn left
			led0Counter = 0;
			led1Counter = LED_TIME;
			led2Counter = 0;
 1f8:	41 2c       	mov	r4, r1
 1fa:	51 2c       	mov	r5, r1
 1fc:	32 01       	movw	r6, r4
			MOTOR_forward();

		}else if(BUTTON_read(BUT_1) == BUTTON_PRESSED){
			//Turn left
			led0Counter = 0;
			led1Counter = LED_TIME;
 1fe:	0f 2e       	mov	r0, r31
 200:	f8 eb       	ldi	r31, 0xB8	; 184
 202:	8f 2e       	mov	r8, r31
 204:	fb e0       	ldi	r31, 0x0B	; 11
 206:	9f 2e       	mov	r9, r31
 208:	a1 2c       	mov	r10, r1
 20a:	b1 2c       	mov	r11, r1
 20c:	f0 2d       	mov	r31, r0
			
			MOTOR_forward();

		}else if(BUTTON_read(BUT_1) == BUTTON_PRESSED){
			//Turn left
			led0Counter = 0;
 20e:	c1 2c       	mov	r12, r1
 210:	d1 2c       	mov	r13, r1
 212:	76 01       	movw	r14, r12
 214:	41 c0       	rjmp	.+130    	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
			led1Counter = LED_TIME;
			led2Counter = 0;
			
			MOTOR_turnLeft();
			
		}else if(BUTTON_read(BUT_2) == BUTTON_PRESSED){
 216:	82 eb       	ldi	r24, 0xB2	; 178
 218:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	89 f4       	brne	.+34     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
			//Turn right
			led0Counter = LED_TIME;
			led1Counter = 0;
			led2Counter = 0;
			
			MOTOR_turnRight();
 220:	0e 94 8c 00 	call	0x118	; 0x118 <MOTOR_turnRight>
			
		}else if(BUTTON_read(BUT_2) == BUTTON_PRESSED){
			//Turn right
			led0Counter = LED_TIME;
			led1Counter = 0;
			led2Counter = 0;
 224:	41 2c       	mov	r4, r1
 226:	51 2c       	mov	r5, r1
 228:	32 01       	movw	r6, r4
			MOTOR_turnLeft();
			
		}else if(BUTTON_read(BUT_2) == BUTTON_PRESSED){
			//Turn right
			led0Counter = LED_TIME;
			led1Counter = 0;
 22a:	81 2c       	mov	r8, r1
 22c:	91 2c       	mov	r9, r1
 22e:	54 01       	movw	r10, r8
			
			MOTOR_turnLeft();
			
		}else if(BUTTON_read(BUT_2) == BUTTON_PRESSED){
			//Turn right
			led0Counter = LED_TIME;
 230:	0f 2e       	mov	r0, r31
 232:	f8 eb       	ldi	r31, 0xB8	; 184
 234:	cf 2e       	mov	r12, r31
 236:	fb e0       	ldi	r31, 0x0B	; 11
 238:	df 2e       	mov	r13, r31
 23a:	e1 2c       	mov	r14, r1
 23c:	f1 2c       	mov	r15, r1
 23e:	f0 2d       	mov	r31, r0
 240:	2b c0       	rjmp	.+86     	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
			led1Counter = 0;
			led2Counter = 0;
			
			MOTOR_turnRight();

		}else if(BUTTON_read(BUT_3) == BUTTON_PRESSED){
 242:	83 eb       	ldi	r24, 0xB3	; 179
 244:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	b1 f4       	brne	.+44     	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
			//Backward
			led0Counter = LED_TIME;
			led1Counter = LED_TIME;
			led2Counter = 0;
			
			MOTOR_backward();
 24c:	0e 94 7b 00 	call	0xf6	; 0xf6 <MOTOR_backward>

		}else if(BUTTON_read(BUT_3) == BUTTON_PRESSED){
			//Backward
			led0Counter = LED_TIME;
			led1Counter = LED_TIME;
			led2Counter = 0;
 250:	41 2c       	mov	r4, r1
 252:	51 2c       	mov	r5, r1
 254:	32 01       	movw	r6, r4
			MOTOR_turnRight();

		}else if(BUTTON_read(BUT_3) == BUTTON_PRESSED){
			//Backward
			led0Counter = LED_TIME;
			led1Counter = LED_TIME;
 256:	0f 2e       	mov	r0, r31
 258:	f8 eb       	ldi	r31, 0xB8	; 184
 25a:	8f 2e       	mov	r8, r31
 25c:	fb e0       	ldi	r31, 0x0B	; 11
 25e:	9f 2e       	mov	r9, r31
 260:	a1 2c       	mov	r10, r1
 262:	b1 2c       	mov	r11, r1
 264:	f0 2d       	mov	r31, r0
			
			MOTOR_turnRight();

		}else if(BUTTON_read(BUT_3) == BUTTON_PRESSED){
			//Backward
			led0Counter = LED_TIME;
 266:	0f 2e       	mov	r0, r31
 268:	f8 eb       	ldi	r31, 0xB8	; 184
 26a:	cf 2e       	mov	r12, r31
 26c:	fb e0       	ldi	r31, 0x0B	; 11
 26e:	df 2e       	mov	r13, r31
 270:	e1 2c       	mov	r14, r1
 272:	f1 2c       	mov	r15, r1
 274:	f0 2d       	mov	r31, r0
 276:	10 c0       	rjmp	.+32     	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
			led1Counter = LED_TIME;
			led2Counter = 0;
			
			MOTOR_backward();
			
		}else if(BUTTON_read(BUT_4) == BUTTON_PRESSED){
 278:	84 eb       	ldi	r24, 0xB4	; 180
 27a:	0e 94 3a 00 	call	0x74	; 0x74 <BUTTON_read>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	59 f4       	brne	.+22     	; 0x298 <__EEPROM_REGION_LENGTH__+0x98>
			//Stop
			led0Counter = 0;
			led1Counter = 0;
			led2Counter = 0;
			
			MOTOR_stop();
 282:	0e 94 ae 00 	call	0x15c	; 0x15c <MOTOR_stop>
			
		}else if(BUTTON_read(BUT_4) == BUTTON_PRESSED){
			//Stop
			led0Counter = 0;
			led1Counter = 0;
			led2Counter = 0;
 286:	41 2c       	mov	r4, r1
 288:	51 2c       	mov	r5, r1
 28a:	32 01       	movw	r6, r4
			MOTOR_backward();
			
		}else if(BUTTON_read(BUT_4) == BUTTON_PRESSED){
			//Stop
			led0Counter = 0;
			led1Counter = 0;
 28c:	81 2c       	mov	r8, r1
 28e:	91 2c       	mov	r9, r1
 290:	54 01       	movw	r10, r8
			
			MOTOR_backward();
			
		}else if(BUTTON_read(BUT_4) == BUTTON_PRESSED){
			//Stop
			led0Counter = 0;
 292:	c1 2c       	mov	r12, r1
 294:	d1 2c       	mov	r13, r1
 296:	76 01       	movw	r14, r12
			led2Counter = 0;
			
			MOTOR_stop();
		}
				
		if(led0Counter>0) LED_on(LED_0);
 298:	c1 14       	cp	r12, r1
 29a:	d1 04       	cpc	r13, r1
 29c:	e1 04       	cpc	r14, r1
 29e:	f1 04       	cpc	r15, r1
 2a0:	21 f0       	breq	.+8      	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
 2a2:	80 ea       	ldi	r24, 0xA0	; 160
 2a4:	0e 94 45 00 	call	0x8a	; 0x8a <LED_on>
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
		else LED_off(LED_0);
 2aa:	80 ea       	ldi	r24, 0xA0	; 160
 2ac:	0e 94 41 00 	call	0x82	; 0x82 <LED_off>

		if(led1Counter>0) LED_on(LED_1);
 2b0:	81 14       	cp	r8, r1
 2b2:	91 04       	cpc	r9, r1
 2b4:	a1 04       	cpc	r10, r1
 2b6:	b1 04       	cpc	r11, r1
 2b8:	21 f0       	breq	.+8      	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
 2ba:	81 ea       	ldi	r24, 0xA1	; 161
 2bc:	0e 94 45 00 	call	0x8a	; 0x8a <LED_on>
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
		else LED_off(LED_1);
 2c2:	81 ea       	ldi	r24, 0xA1	; 161
 2c4:	0e 94 41 00 	call	0x82	; 0x82 <LED_off>

		if(led2Counter>0) LED_on(LED_2);
 2c8:	41 14       	cp	r4, r1
 2ca:	51 04       	cpc	r5, r1
 2cc:	61 04       	cpc	r6, r1
 2ce:	71 04       	cpc	r7, r1
 2d0:	21 f0       	breq	.+8      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
 2d2:	82 ea       	ldi	r24, 0xA2	; 162
 2d4:	0e 94 45 00 	call	0x8a	; 0x8a <LED_on>
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <__EEPROM_REGION_LENGTH__+0xe0>
		else LED_off(LED_2);
 2da:	82 ea       	ldi	r24, 0xA2	; 162
 2dc:	0e 94 41 00 	call	0x82	; 0x82 <LED_off>
		
		
		if(led0Counter>0) led0Counter--;
 2e0:	c1 14       	cp	r12, r1
 2e2:	d1 04       	cpc	r13, r1
 2e4:	e1 04       	cpc	r14, r1
 2e6:	f1 04       	cpc	r15, r1
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <__EEPROM_REGION_LENGTH__+0xf4>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	c8 1a       	sub	r12, r24
 2ee:	d1 08       	sbc	r13, r1
 2f0:	e1 08       	sbc	r14, r1
 2f2:	f1 08       	sbc	r15, r1
		if(led1Counter>0) led1Counter--;
 2f4:	81 14       	cp	r8, r1
 2f6:	91 04       	cpc	r9, r1
 2f8:	a1 04       	cpc	r10, r1
 2fa:	b1 04       	cpc	r11, r1
 2fc:	29 f0       	breq	.+10     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	89 1a       	sub	r8, r25
 302:	91 08       	sbc	r9, r1
 304:	a1 08       	sbc	r10, r1
 306:	b1 08       	sbc	r11, r1
		if(led2Counter>0) led2Counter--;
 308:	41 14       	cp	r4, r1
 30a:	51 04       	cpc	r5, r1
 30c:	61 04       	cpc	r6, r1
 30e:	71 04       	cpc	r7, r1
 310:	29 f0       	breq	.+10     	; 0x31c <__EEPROM_REGION_LENGTH__+0x11c>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	48 1a       	sub	r4, r24
 316:	51 08       	sbc	r5, r1
 318:	61 08       	sbc	r6, r1
 31a:	71 08       	sbc	r7, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	89 ef       	ldi	r24, 0xF9	; 249
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <__EEPROM_REGION_LENGTH__+0x120>
 324:	00 c0       	rjmp	.+0      	; 0x326 <__EEPROM_REGION_LENGTH__+0x126>
 326:	00 00       	nop
 328:	4a cf       	rjmp	.-364    	; 0x1be <main+0x40>

0000032a <DIO_pinMode>:

#include "DIO_interface.h"

void DIO_pinMode(char PIN_NO,char DIR){
	char pin,port;
	pin =  PIN_NO & 0x0f;
 32a:	98 2f       	mov	r25, r24
 32c:	9f 70       	andi	r25, 0x0F	; 15
	port = PIN_NO & 0xf0;
 32e:	80 7f       	andi	r24, 0xF0	; 240
	
	switch(DIR){
 330:	66 23       	and	r22, r22
 332:	09 f4       	brne	.+2      	; 0x336 <DIO_pinMode+0xc>
 334:	42 c0       	rjmp	.+132    	; 0x3ba <DIO_pinMode+0x90>
 336:	61 30       	cpi	r22, 0x01	; 1
 338:	09 f0       	breq	.+2      	; 0x33c <DIO_pinMode+0x12>
 33a:	81 c0       	rjmp	.+258    	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
		case OUTPUT:
		switch (port){
 33c:	80 3b       	cpi	r24, 0xB0	; 176
 33e:	b1 f0       	breq	.+44     	; 0x36c <DIO_pinMode+0x42>
 340:	18 f4       	brcc	.+6      	; 0x348 <DIO_pinMode+0x1e>
 342:	80 3a       	cpi	r24, 0xA0	; 160
 344:	31 f0       	breq	.+12     	; 0x352 <DIO_pinMode+0x28>
 346:	08 95       	ret
 348:	80 3c       	cpi	r24, 0xC0	; 192
 34a:	e9 f0       	breq	.+58     	; 0x386 <DIO_pinMode+0x5c>
 34c:	80 3d       	cpi	r24, 0xD0	; 208
 34e:	41 f1       	breq	.+80     	; 0x3a0 <DIO_pinMode+0x76>
 350:	08 95       	ret
			case A:SET_BIT(DDRA,pin); break;
 352:	4a b3       	in	r20, 0x1a	; 26
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_pinMode+0x36>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	9a 95       	dec	r25
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_pinMode+0x32>
 364:	cb 01       	movw	r24, r22
 366:	84 2b       	or	r24, r20
 368:	8a bb       	out	0x1a, r24	; 26
 36a:	08 95       	ret
			case B:SET_BIT(DDRB,pin); break;
 36c:	47 b3       	in	r20, 0x17	; 23
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_pinMode+0x50>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	9a 95       	dec	r25
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_pinMode+0x4c>
 37e:	cb 01       	movw	r24, r22
 380:	84 2b       	or	r24, r20
 382:	87 bb       	out	0x17, r24	; 23
 384:	08 95       	ret
			case C:SET_BIT(DDRC,pin); break;
 386:	44 b3       	in	r20, 0x14	; 20
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	b9 01       	movw	r22, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_pinMode+0x6a>
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	9a 95       	dec	r25
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_pinMode+0x66>
 398:	cb 01       	movw	r24, r22
 39a:	84 2b       	or	r24, r20
 39c:	84 bb       	out	0x14, r24	; 20
 39e:	08 95       	ret
			case D:SET_BIT(DDRD,pin); break;
 3a0:	41 b3       	in	r20, 0x11	; 17
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	b9 01       	movw	r22, r18
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_pinMode+0x84>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	9a 95       	dec	r25
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_pinMode+0x80>
 3b2:	cb 01       	movw	r24, r22
 3b4:	84 2b       	or	r24, r20
 3b6:	81 bb       	out	0x11, r24	; 17
 3b8:	08 95       	ret
		}
		break;
		case INPUT:
		switch (port){
 3ba:	80 3b       	cpi	r24, 0xB0	; 176
 3bc:	b9 f0       	breq	.+46     	; 0x3ec <DIO_pinMode+0xc2>
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <DIO_pinMode+0x9c>
 3c0:	80 3a       	cpi	r24, 0xA0	; 160
 3c2:	31 f0       	breq	.+12     	; 0x3d0 <DIO_pinMode+0xa6>
 3c4:	08 95       	ret
 3c6:	80 3c       	cpi	r24, 0xC0	; 192
 3c8:	f9 f0       	breq	.+62     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3ca:	80 3d       	cpi	r24, 0xD0	; 208
 3cc:	59 f1       	breq	.+86     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 3ce:	08 95       	ret
			case A:CLR_BIT(DDRA,pin); break;
 3d0:	4a b3       	in	r20, 0x1a	; 26
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	b9 01       	movw	r22, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_pinMode+0xb4>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	9a 95       	dec	r25
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_pinMode+0xb0>
 3e2:	cb 01       	movw	r24, r22
 3e4:	80 95       	com	r24
 3e6:	84 23       	and	r24, r20
 3e8:	8a bb       	out	0x1a, r24	; 26
 3ea:	08 95       	ret
			case B:CLR_BIT(DDRB,pin); break;
 3ec:	47 b3       	in	r20, 0x17	; 23
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_pinMode+0xd0>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	9a 95       	dec	r25
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_pinMode+0xcc>
 3fe:	cb 01       	movw	r24, r22
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	87 bb       	out	0x17, r24	; 23
 406:	08 95       	ret
			case C:CLR_BIT(DDRC,pin); break;
 408:	44 b3       	in	r20, 0x14	; 20
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	b9 01       	movw	r22, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 412:	66 0f       	add	r22, r22
 414:	77 1f       	adc	r23, r23
 416:	9a 95       	dec	r25
 418:	e2 f7       	brpl	.-8      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
 41a:	cb 01       	movw	r24, r22
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	84 bb       	out	0x14, r24	; 20
 422:	08 95       	ret
			case D:CLR_BIT(DDRD,pin); break;
 424:	41 b3       	in	r20, 0x11	; 17
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__DATA_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	9a 95       	dec	r25
 434:	e2 f7       	brpl	.-8      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	81 bb       	out	0x11, r24	; 17
 43e:	08 95       	ret

00000440 <DIO_digitalWrite>:
	}
}

void DIO_digitalWrite(char PIN_NO,char STATE){
	char pin,port;
	pin =  PIN_NO & 0x0f;
 440:	98 2f       	mov	r25, r24
 442:	9f 70       	andi	r25, 0x0F	; 15
	port = PIN_NO & 0xf0;
 444:	80 7f       	andi	r24, 0xF0	; 240
	
	switch(STATE){
 446:	66 23       	and	r22, r22
 448:	09 f4       	brne	.+2      	; 0x44c <DIO_digitalWrite+0xc>
 44a:	42 c0       	rjmp	.+132    	; 0x4d0 <__stack+0x71>
 44c:	61 30       	cpi	r22, 0x01	; 1
 44e:	09 f0       	breq	.+2      	; 0x452 <DIO_digitalWrite+0x12>
 450:	81 c0       	rjmp	.+258    	; 0x554 <__stack+0xf5>
		case HIGH:
		switch (port){
 452:	80 3b       	cpi	r24, 0xB0	; 176
 454:	b1 f0       	breq	.+44     	; 0x482 <__stack+0x23>
 456:	18 f4       	brcc	.+6      	; 0x45e <DIO_digitalWrite+0x1e>
 458:	80 3a       	cpi	r24, 0xA0	; 160
 45a:	31 f0       	breq	.+12     	; 0x468 <__stack+0x9>
 45c:	08 95       	ret
 45e:	80 3c       	cpi	r24, 0xC0	; 192
 460:	e9 f0       	breq	.+58     	; 0x49c <__stack+0x3d>
 462:	80 3d       	cpi	r24, 0xD0	; 208
 464:	41 f1       	breq	.+80     	; 0x4b6 <__stack+0x57>
 466:	08 95       	ret
			case A:SET_BIT(PORTA,pin); break;
 468:	4b b3       	in	r20, 0x1b	; 27
 46a:	21 e0       	ldi	r18, 0x01	; 1
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	b9 01       	movw	r22, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x17>
 472:	66 0f       	add	r22, r22
 474:	77 1f       	adc	r23, r23
 476:	9a 95       	dec	r25
 478:	e2 f7       	brpl	.-8      	; 0x472 <__stack+0x13>
 47a:	cb 01       	movw	r24, r22
 47c:	84 2b       	or	r24, r20
 47e:	8b bb       	out	0x1b, r24	; 27
 480:	08 95       	ret
			case B:SET_BIT(PORTB,pin); break;
 482:	48 b3       	in	r20, 0x18	; 24
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__stack+0x31>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	9a 95       	dec	r25
 492:	e2 f7       	brpl	.-8      	; 0x48c <__stack+0x2d>
 494:	cb 01       	movw	r24, r22
 496:	84 2b       	or	r24, r20
 498:	88 bb       	out	0x18, r24	; 24
 49a:	08 95       	ret
			case C:SET_BIT(PORTC,pin); break;
 49c:	45 b3       	in	r20, 0x15	; 21
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	b9 01       	movw	r22, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__stack+0x4b>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	9a 95       	dec	r25
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__stack+0x47>
 4ae:	cb 01       	movw	r24, r22
 4b0:	84 2b       	or	r24, r20
 4b2:	85 bb       	out	0x15, r24	; 21
 4b4:	08 95       	ret
			case D:SET_BIT(PORTD,pin); break;
 4b6:	42 b3       	in	r20, 0x12	; 18
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__stack+0x65>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	9a 95       	dec	r25
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__stack+0x61>
 4c8:	cb 01       	movw	r24, r22
 4ca:	84 2b       	or	r24, r20
 4cc:	82 bb       	out	0x12, r24	; 18
 4ce:	08 95       	ret
		}
		break;
		case LOW:
		switch (port){
 4d0:	80 3b       	cpi	r24, 0xB0	; 176
 4d2:	b9 f0       	breq	.+46     	; 0x502 <__stack+0xa3>
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <__stack+0x7d>
 4d6:	80 3a       	cpi	r24, 0xA0	; 160
 4d8:	31 f0       	breq	.+12     	; 0x4e6 <__stack+0x87>
 4da:	08 95       	ret
 4dc:	80 3c       	cpi	r24, 0xC0	; 192
 4de:	f9 f0       	breq	.+62     	; 0x51e <__stack+0xbf>
 4e0:	80 3d       	cpi	r24, 0xD0	; 208
 4e2:	59 f1       	breq	.+86     	; 0x53a <__stack+0xdb>
 4e4:	08 95       	ret
			case A:CLR_BIT(PORTA,pin); break;
 4e6:	4b b3       	in	r20, 0x1b	; 27
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	b9 01       	movw	r22, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <__stack+0x95>
 4f0:	66 0f       	add	r22, r22
 4f2:	77 1f       	adc	r23, r23
 4f4:	9a 95       	dec	r25
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <__stack+0x91>
 4f8:	cb 01       	movw	r24, r22
 4fa:	80 95       	com	r24
 4fc:	84 23       	and	r24, r20
 4fe:	8b bb       	out	0x1b, r24	; 27
 500:	08 95       	ret
			case B:CLR_BIT(PORTB,pin); break;
 502:	48 b3       	in	r20, 0x18	; 24
 504:	21 e0       	ldi	r18, 0x01	; 1
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	b9 01       	movw	r22, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__stack+0xb1>
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	9a 95       	dec	r25
 512:	e2 f7       	brpl	.-8      	; 0x50c <__stack+0xad>
 514:	cb 01       	movw	r24, r22
 516:	80 95       	com	r24
 518:	84 23       	and	r24, r20
 51a:	88 bb       	out	0x18, r24	; 24
 51c:	08 95       	ret
			case C:CLR_BIT(PORTC,pin); break;
 51e:	45 b3       	in	r20, 0x15	; 21
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	b9 01       	movw	r22, r18
 526:	02 c0       	rjmp	.+4      	; 0x52c <__stack+0xcd>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	9a 95       	dec	r25
 52e:	e2 f7       	brpl	.-8      	; 0x528 <__stack+0xc9>
 530:	cb 01       	movw	r24, r22
 532:	80 95       	com	r24
 534:	84 23       	and	r24, r20
 536:	85 bb       	out	0x15, r24	; 21
 538:	08 95       	ret
			case D:CLR_BIT(PORTD,pin); break;
 53a:	42 b3       	in	r20, 0x12	; 18
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <__stack+0xe9>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	9a 95       	dec	r25
 54a:	e2 f7       	brpl	.-8      	; 0x544 <__stack+0xe5>
 54c:	cb 01       	movw	r24, r22
 54e:	80 95       	com	r24
 550:	84 23       	and	r24, r20
 552:	82 bb       	out	0x12, r24	; 18
 554:	08 95       	ret

00000556 <DIO_digitalRead>:
	}
}

char DIO_digitalRead(char PIN_NO){
	char pin,port;
	pin =  PIN_NO & 0x0f;
 556:	28 2f       	mov	r18, r24
 558:	2f 70       	andi	r18, 0x0F	; 15
	port = PIN_NO & 0xf0;
 55a:	80 7f       	andi	r24, 0xF0	; 240
	
	switch (port){
 55c:	80 3b       	cpi	r24, 0xB0	; 176
 55e:	91 f0       	breq	.+36     	; 0x584 <DIO_digitalRead+0x2e>
 560:	18 f4       	brcc	.+6      	; 0x568 <DIO_digitalRead+0x12>
 562:	80 3a       	cpi	r24, 0xA0	; 160
 564:	31 f0       	breq	.+12     	; 0x572 <DIO_digitalRead+0x1c>
 566:	29 c0       	rjmp	.+82     	; 0x5ba <DIO_digitalRead+0x64>
 568:	80 3c       	cpi	r24, 0xC0	; 192
 56a:	a9 f0       	breq	.+42     	; 0x596 <DIO_digitalRead+0x40>
 56c:	80 3d       	cpi	r24, 0xD0	; 208
 56e:	e1 f0       	breq	.+56     	; 0x5a8 <DIO_digitalRead+0x52>
 570:	24 c0       	rjmp	.+72     	; 0x5ba <DIO_digitalRead+0x64>
		case A:return GET_BIT(PINA,pin); break;
 572:	89 b3       	in	r24, 0x19	; 25
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_digitalRead+0x26>
 578:	95 95       	asr	r25
 57a:	87 95       	ror	r24
 57c:	2a 95       	dec	r18
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_digitalRead+0x22>
 580:	81 70       	andi	r24, 0x01	; 1
 582:	08 95       	ret
		case B:return GET_BIT(PINB,pin); break;
 584:	86 b3       	in	r24, 0x16	; 22
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_digitalRead+0x38>
 58a:	95 95       	asr	r25
 58c:	87 95       	ror	r24
 58e:	2a 95       	dec	r18
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_digitalRead+0x34>
 592:	81 70       	andi	r24, 0x01	; 1
 594:	08 95       	ret
		case C:return GET_BIT(PINC,pin); break;
 596:	83 b3       	in	r24, 0x13	; 19
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_digitalRead+0x4a>
 59c:	95 95       	asr	r25
 59e:	87 95       	ror	r24
 5a0:	2a 95       	dec	r18
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_digitalRead+0x46>
 5a4:	81 70       	andi	r24, 0x01	; 1
 5a6:	08 95       	ret
		case D:return GET_BIT(PIND,pin); break;
 5a8:	80 b3       	in	r24, 0x10	; 16
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_digitalRead+0x5c>
 5ae:	95 95       	asr	r25
 5b0:	87 95       	ror	r24
 5b2:	2a 95       	dec	r18
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_digitalRead+0x58>
 5b6:	81 70       	andi	r24, 0x01	; 1
 5b8:	08 95       	ret
	}
}
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
